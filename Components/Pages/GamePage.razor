@page "/GamePage"
@using EnDejtTillApplication.Managers;
@using EnDejtTillApplication.Models;


<style>
    .icon
    {
        width: 20px;
        height: 20px; 
    }

    .inline-elements {
        display: inline-block;
        vertical-align: middle; 
    }

</style>



<!--Visar spelarens namn och att det är deras tur -->
<h2>@($"{ActivePlayer.Name}s tur")</h2>
@if (ActivePlayer.LivesTogether)
{
    
    <h5 class="inline-elements">Relationsstatus: Sambo</h5>
    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z" /></svg>

}

else if (!ActivePlayer.LivesTogether)
{
    <h5 class="inline-elements">Relationsstatus: Dejtar</h5>
    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M88.2 309.1c9.8-18.3 6.8-40.8-7.5-55.8C59.4 230.9 48 204 48 176c0-63.5 63.8-128 160-128s160 64.5 160 128s-63.8 128-160 128c-13.1 0-25.8-1.3-37.8-3.6c-10.4-2-21.2-.6-30.7 4.2c-4.1 2.1-8.3 4.1-12.6 6c-16 7.2-32.9 13.5-49.9 18c2.8-4.6 5.4-9.1 7.9-13.6c1.1-1.9 2.2-3.9 3.2-5.9zM0 176c0 41.8 17.2 80.1 45.9 110.3c-.9 1.7-1.9 3.5-2.8 5.1c-10.3 18.4-22.3 36.5-36.6 52.1c-6.6 7-8.3 17.2-4.6 25.9C5.8 378.3 14.4 384 24 384c43 0 86.5-13.3 122.7-29.7c4.8-2.2 9.6-4.5 14.2-6.8c15.1 3 30.9 4.5 47.1 4.5c114.9 0 208-78.8 208-176S322.9 0 208 0S0 78.8 0 176zM432 480c16.2 0 31.9-1.6 47.1-4.5c4.6 2.3 9.4 4.6 14.2 6.8C529.5 498.7 573 512 616 512c9.6 0 18.2-5.7 22-14.5c3.8-8.8 2-19-4.6-25.9c-14.2-15.6-26.2-33.7-36.6-52.1c-.9-1.7-1.9-3.4-2.8-5.1C622.8 384.1 640 345.8 640 304c0-94.4-87.9-171.5-198.2-175.8c4.1 15.2 6.2 31.2 6.2 47.8l0 .6c87.2 6.7 144 67.5 144 127.4c0 28-11.4 54.9-32.7 77.2c-14.3 15-17.3 37.6-7.5 55.8c1.1 2 2.2 4 3.2 5.9c2.5 4.5 5.2 9 7.9 13.6c-17-4.5-33.9-10.7-49.9-18c-4.3-1.9-8.5-3.9-12.6-6c-9.5-4.8-20.3-6.2-30.7-4.2c-12.1 2.4-24.7 3.6-37.8 3.6c-61.7 0-110-26.5-136.8-62.3c-16 5.4-32.8 9.4-50 11.8C279 439.8 350 480 432 480z" /></svg>
}

else if (ActivePlayer.IsMarried)
{
    <h5>Relationsstatus: GIFT</h5>
}

 <!-- Kollar om spelaren har kort (gått på dejter innan) på handen. -->
@if (ActivePlayer.Hand.Count > 0)
{
    // Om spelaren har kort i handen (gått på dejter innan) så visas texten från dessa. 
    @if (ActivePlayer.LivesTogether==true)
    {
        <p>@ActivePlayer.Name är sambo med någon som </p>
    }

    else if (ActivePlayer.LivesTogether==false)
    {
        <p>@ActivePlayer.Name är på dejt med någon som </p>
    }
   
    foreach(Card card in ActivePlayer.Hand)
    {
        
        <p> @card.Question</p>
        @if(lastQuestionCounter< ActivePlayer.Hand.Count)
        {
            // Så länge det finns fler påståenden så ska "och" läggas till
            <p>och</p>
        }

        // Räknar hur många dejter man varit på (genom att räkna antalet påståenden)
        lastQuestionCounter++;
    }

    if (ActivePlayer.LivesTogether==false)
    {
        //  Visar text som beskriver vilken dejtnummer spelaren är på och aktuell fråga
        <p>På den @dateNumber dejten framkommer det att @currentQuestion</p>
        <h5>Vill du gå på en dejt till?</h5>
    }

    else if (ActivePlayer.LivesTogether==true)
    {

        //  Visar text som beskriver vilken dejt spelaren är på och aktuell fråga
        <p>Nu framkommer det att @currentQuestion</p>
        <h5>Vill du fortsätta samboförhållandet?</h5>
    }

}
else
{
<p>@ActivePlayer.Name är på sin första dejt och träffar en person som är helt perfekt. Hen är snygg, rolig och delar din humor. Men under dejten så framkommer det att @currentQuestion</p>
}

  
<button @onclick="SaveCardOnPlayer">En dejt till</button>
<button @onclick="DeletePlayerHand">Nej fyfan </button>


@code {
    private string dateNumber;
    private int dateCounter;
    private int lastQuestionCounter = 0;
    private int ActivePlayerIndex = 0;
    private int ActiveCardIndex = 0;
    private bool IsStarterDeck;
    private Player ActivePlayer = new();
    private List<Player> players = new();
    private StarterDeck ActiveStarterDeck = new();
    private PartyDeck ActivePartyDeck = new();
    private string deckName;
    private string currentQuestion;
    private Card ActiveCard; 

    protected override  void OnInitialized()
    {

        players = PlayerManager.Players;

        ConvertActiveDeck();
        InitializeActiveCard();
        InitializeActivePlayer();


        Game newGame = new()
            {
                Deck = GameManager.ActiveDeck,
                Players = players,
                CurrentPlayerIndex = 1
            };



    }


    public void ConvertActiveDeck()
    {
        if(GameManager.ActiveDeck.GetType() ==typeof(StarterDeck))
        {
            StarterDeck starterDeck = (StarterDeck)GameManager.ActiveDeck;
            deckName = starterDeck.Name;
            ActiveStarterDeck = starterDeck;
            IsStarterDeck = true; 
        }
        else if (GameManager.ActiveDeck.GetType() == typeof(PartyDeck))
        {
            PartyDeck partyDeck = (PartyDeck)GameManager.ActiveDeck;
            deckName = partyDeck.Name;
            ActivePartyDeck = partyDeck;
        }

    }

    private void DeletePlayerHand()
    {
        ActivePlayer.Hand.Clear();
        SwitchPlayer();
    }

    private void SaveCardOnPlayer()
    {

        ActivePlayer.Hand.Add(ActiveCard);
        if (ActivePlayer.Hand.Count>=5)
        {
            // Om man gått på 5 dejter så är man sambos. 
            ActivePlayer.LivesTogether = true;

        }

        else if (ActivePlayer.Hand.Count==10)
        {
            // Om man gått på 10 dejter så är man gift. 
            ActivePlayer.IsMarried = true;
        }

        // Nästa spelare. 
        SwitchPlayer();

    }

    private bool CheckMarriageStatus(int index)
    {
        Player PotentiallyMarriedPlayer = players[index];
        if (PotentiallyMarriedPlayer.IsMarried)
        {
            return true;
        }
        else 
        {
            return false;
        }

    }

    private void SwitchPlayer()
    {
        if (ActivePlayerIndex >= players.Count-1)
        {
            // Börja en ny runda om alla har svarat. 
            ActivePlayerIndex = 0;
        }
        else
        {
            // Annars, gå vidare till nästa person
            ActivePlayerIndex++;
            // Kolla om denna person är gift
            bool isMarried = CheckMarriageStatus(ActivePlayerIndex);
            if (isMarried)
            {
                ActivePlayerIndex++;  // om personen är gift, hoppa över denna. 
            }
        }

        if (ActiveCardIndex >= 5)
        {
            // Om ActiveCardIndex är större än 5, börja om från 0.
            ActiveCardIndex = 0;
        }
        else
        {
            // öka ActiveCardIndex med 1 för att gå vidare till nästa kort i kortleken.
            ActiveCardIndex++;
        }


        InitializeActiveCard();
        InitializeActivePlayer();
        lastQuestionCounter = 0;
        CalculateActivePlayerDate();
        StateHasChanged();

    }


    private void InitializeActivePlayer()
    {
        ActivePlayer = players[ActivePlayerIndex];
    }

    private void InitializeActiveCard()
    {
        ConvertActiveDeck();


        if (IsStarterDeck)
        {
            ActiveCard = ActiveStarterDeck.Cards[ActiveCardIndex];
            currentQuestion = ActiveCard.Question;
        }
        else
        {
            ActiveCard = ActivePartyDeck.Cards[ActiveCardIndex];
            currentQuestion = ActiveCard.Question;
        }
    }


    private void CalculateActivePlayerDate()
    {
        if(ActivePlayer.Hand.Count == 1)
        {
            dateNumber = "andra";
        }

        else if (ActivePlayer.Hand.Count == 2)
        {
            dateNumber = "tredje";
        }
        else if (ActivePlayer.Hand.Count == 3)
        {
            dateNumber = "fjärde";
        }
        else if (ActivePlayer.Hand.Count == 4)
        {
            dateNumber = "femte";
        }
        else if (ActivePlayer.Hand.Count == 5)
        {
            dateNumber = "sjätte";
        }
        else if (ActivePlayer.Hand.Count == 6)
        {
            dateNumber = "sjunde";
        }
        else if (ActivePlayer.Hand.Count == 7)
        {
            dateNumber = "åttonde";
        }
        else if (ActivePlayer.Hand.Count == 8)
        {
            dateNumber = "nionde";
        }
        else if (ActivePlayer.Hand.Count == 9)
        {
            dateNumber = "tionde";
        }
    }


}
